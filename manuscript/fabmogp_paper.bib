@InProceedings{vecma-tk,
author="Groen, Derek
and Richardson, Robin A.
and Wright, David W.
and Jancauskas, Vytautas
and Sinclair, Robert
and Karlshoefer, Paul
and Vassaux, Maxime
and Arabnejad, Hamid
and Piontek, Tomasz
and Kopta, Piotr
and Bosak, Bartosz
and Lakhlili, Jalal
and Hoenen, Olivier
and Suleimenova, Diana
and Edeling, Wouter
and Crommelin, Daan
and Nikishova, Anna
and Coveney, Peter V.",
editor="Rodrigues, Jo{\~a}o M. F.
and Cardoso, Pedro J. S.
and Monteiro, J{\^a}nio
and Lam, Roberto
and Krzhizhanovskaya, Valeria V.
and Lees, Michael H.
and Dongarra, Jack J.
and Sloot, Peter M.A.",
title="Introducing {VECMAtk} - Verification, Validation and Uncertainty Quantification for Multiscale and {HPC} Simulations",
booktitle="Computational Science -- ICCS 2019",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="479--492",
abstract="Multiscale simulations are an essential computational method in a range of research disciplines, and provide unprecedented levels of scientific insight at a tractable cost in terms of effort and compute resources. To provide this, we need such simulations to produce results that are both robust and actionable. The VECMA toolkit (VECMAtk), which is officially released in conjunction with the present paper, establishes a platform to achieve this by exposing patterns for verification, validation and uncertainty quantification (VVUQ). These patterns can be combined to capture complex scenarios, applied to applications in disparate domains, and used to run multiscale simulations on any desktop, cluster or supercomputing platform.",
isbn="978-3-030-22747-0"
}

@article{fabsim,
title = "{FabSim}: Facilitating computational research through automation on large-scale and distributed e-infrastructures",
journal = "Computer Physics Communications",
volume = "207",
pages = "375 - 385",
year = "2016",
issn = "0010-4655",
author = "Derek Groen and Agastya P. Bhati and James Suter and James Hetherington and Stefan J. Zasada and Peter V. Coveney",
keywords = "Automation, Workflows, Distributed computing, Software, Bloodflow modelling, Molecular dynamics, Multiscale modelling, Clay-polymer nanocomposites",
abstract = "We present FabSim, a toolkit developed to simplify a range of computational tasks for researchers in diverse disciplines. FabSim is flexible, adaptable, and allows users to perform a wide range of tasks with ease. It also provides a systematic way to automate the use of resources, including HPC and distributed machines, and to make tasks easier to repeat by recording contextual information. To demonstrate this, we present three use cases where FabSim has enhanced our research productivity. These include simulating cerebrovascular bloodflow, modelling clay-polymer nanocomposites across multiple scales, and calculating ligand–protein binding affinities.
Program summary
Program title: FabSim Catalogue identifier: AFAO_v1_0 Program summary URL:http://cpc.cs.qub.ac.uk/summaries/AFAO_v1_0.html Program obtainable from: CPC Programme Library, Queen’s University, Belfast, N. Ireland Licensing provisions: BSD 3-Clause No. of lines in distributed program, including test data, etc.: 268282 No. of bytes in distributed program, including test data, etc.: 2791792 Distribution format: tar.gz Programming language: Python. Computer: PC or Mac. Operating system: Unix, OSX. RAM: 1 Gbytes Classification: 3, 4, 6.5. External routines: NumPy, SciPy, Fabric (1.5 or newer), PyYaml Nature of problem: Running advanced computations using remote resources is an activity that requires considerable time and human attention. These activities, such as organizing data, configuring software and setting up individual runs often vary slightly each time they are performed. To lighten this burden, we required an approach that introduced little burden of its own to set up and adapt, beyond which very substantial productivity ensues. Solution method: We present a toolkit which helps to simplify and automate the activities which surround computational science research. FabSim is aimed squarely at the experienced computational scientist, who can use the command line interface and a system of modifiable content to quickly automate sets of research tasks. Restrictions: FabSim relies on a command-line interface, and assumes some level of scripting knowledge from the user. Unusual features: FabSim has a proven track record of being easy to adapt. It has already been extensively adapted to facilitate leading research in the modelling of bloodflow, nanomaterials, and ligand–protein binding. Running time: FabSim can be used interactively, typically requiring a few seconds to perform a basic task."
}

@article{easyvvuq,
author = "Wright, David W. and Richardson, Robin A. and Edeling, Wouter and Lakhlili, Jalal and Sinclair, Robert C. and Jancauskas, Vytautas and Suleimenova, Diana and Bosak, Bartosz and Kulczewski, Michal and Piontek, Tomasz and Kopta, Piotr and Chirca, Irina and Arabnejad, Hamid and Luk, Onnie O. and Hoenen, Olivier and Węglarz, Jan and Crommelin, Daan and Groen, Derek and Coveney, Peter V.",
title = "Building Confidence in Simulation: Applications of {EasyVVUQ}",
journal = "Advanced Theory and Simulations",
volume = "n/a",
number = "n/a",
pages = "1900246",
keywords = "high-performance computing, multiscale simulations, uncertainty quantification",
abstract = "Abstract Validation, verification, and uncertainty quantification (VVUQ) of simulation workflows are essential for building trust in simulation results, and their increased use in decision-making processes. The EasyVVUQ Python library is designed to facilitate implementation of advanced VVUQ techniques in new or existing workflows, with a particular focus on high-performance computing, middleware agnosticism, and multiscale modeling. Here, the application of EasyVVUQ to five very diverse application areas is demonstrated: materials properties, ocean circulation modeling, fusion reactors, forced human migration, and urban air quality prediction."
}

